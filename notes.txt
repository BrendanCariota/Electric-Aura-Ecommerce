---------------------------------
CREATING A FULL STACK APPLICATION
---------------------------------

FOLDER SETUP
We will have TWO folder in our project folder [frontend, backend]
- FRONTEND - this is created with (npx create-react-app frontend) and is where we will install all of our frontend/react dependencies
- BACKEND - this is created manually and will hold our server.js file as to run our backend as well as our env files and routes

GIT
We will use (git init) in our main project root folder to initialze a git repository at the root encompassing both the frontend and backend folders

FRONTEND
The frontend is setup like a traditional react application installing all of the dependencies need in the frontend section
We can use npm start to run this as it's own seperate thing in the being to get basic functionalty and styling

BACKEND
After we create the backend folder we will create our server.js file to start our server

SETTING UP THE BACKEND
We must install a few useful packages (express, dotenv) 
Express lets us interact easily with our database and dotenv lets us setup an (.env) file to house import information like our PORT and MONGO_URI
We will use the newer es7 module syntax to import what we need vs the older require syntax
To utilze this feature we need to add ("type": "module",) to our global package.json file
- 1. We can now import express to connect to our server (import express from 'express') notice this syntax is the same as react to make things easier
- 2. We can import dotenv and setup an (.env) file to house our basic information as the start
- (.env) we will put our PORT=5000 and our MONGO_URI in this file for now
- 3. Run express (const app = express())
We can now start setting up some basic routes
We will set up (app.get("/), (req, res) => { res.send("The is the home page") }) just to make sure we can hit our routes
Finally we will setup our listen so we can actually tell the server where to run on our local machine
- const PORT = process.env.PORT - this will set our PORT from our .env file to this variable for use in our application 
- (app.listen(PORT, console.log(Server started on port ${PORT})))
- to send static data from it we can just use res.json(data) to pass the json data when we hit the link we are looking for
- We can now run our server

SETTING UP NODEMON AND CONCURRENTLY
We will set these two things up real quick to make development much easier
- 1. Install nodemon and concurrently in the root folder
- 2. We will then go to the root package.json and add the following
-   "start": "node backend/server",
    "server": "nodemon backend/server",
    "client": "npm start --prefix frontend",
    "dev": "concurrently \"npm run server\" \"npm run client\""
This will allow us to run both the react frontend and the backend with nodemon by utilzing the (npm run dev) command

SETTING UP AND CONNECTING MONGODB
We will set up a MongoDB cluster and database like normal
- Make sure to add yourself as a user and add your ip address so we can connect
We will now install MONGOOSE to manipulate our database
- npm install mongoose in our root folder
We will now create a Database connection file
- 1. Create a new folder called configs in our backend folder
- 2. create a file (db.js) -> This will be where we connect to our database
- 3. import mongoose and setup our async function to connect to the database
- 4. Import our function for connecting into our (server.js) file
- 5. Call that function and we should be good to connect

MODELING OUR DATA
Create a models folder in our backend and setup the models we need
In this case its Users, Products, and Orders
Create and export the schemas

PREPARING TEMPORARY DATA TO BUILD THE APPLICATION
- Install (bcryptjs) in root folder so we can hash our passwords (encrypt)
- Create a products.js and users.js file following our schema so we have some information to work with
- Hash the user passwords with bcryptjs
- CREATE A SEEDER SCRIPT (Temporary) to seed our Mongo Database with the products and users we created
- seeder script at (seeder.js)

FETCHING PRODUCTS FROM THE Database
We will create a routes folder in our backend to help maintain structure
- 1. Start with creating the proudctRoutes file (productRoutes.js)
- - We will import express and utilze router
- - Create the routes
- 2. Connect them to (server.js) by importing the (productRoutes.js) file
- - Next we will app.use(/api/products) because all of our productRoutes will start with that
- 3. Install express-async-handler which is a middleware that handles our try catches so we dont have to
- - Add middleware to routes
- 4. Setup POSTMAN
- MIDDLEWARE is a function that has access to the (req, res) life cycle
- - We will create a middleware folder in our backend and the create or errorMiddleware file
- - create the two pieces of middleware
- - Import them into our (server.js) and call them at the bottom with (app.use())

REDUX
- 1. Install redux, react-redux redux-thunk(make async req in action creators) redux-devtools-extension
- 2. Create (store.js) file in src folder in frontend
- 3. To implement our store we need to use a proivder (react-redux) in our (index.js) file

REDUCERS
- 1. Setup a reducers folder in our src
- 2. We will start setting up the productReducer
- 3. To use the reducers we must add it to (store.js)

ACTIONS
- 1. Create an actions folder in our source
- 2. We will start by creating our productActions

BRINGING REDUX STATE TO OUR HOME SCREEN
- - We no longer need to keep our state in our HomeScreen component or use our useEffect to fetch the products from the backend
- 1. Import useDispatch and useSelector from 'react-redux' in our Home Screen
- - useSelector is used to grab pieces of state from redux

CREATING NEW FUNCTIONALITY
- 1. [Constants] Add new constants to use in your reducers (constants) folder
- 2. [Reducer] Create a new reducer for the functionality
- 3. [Store] When a new reducer is created we need to add it to our store
- 4. [Action] Create a new action
- 5. [Component] Go to the component and useDispatch and useSelector to incorporate the state into your component and bring in action

CONTROLLERS
- 1. In backend create a folder for our controllers
- - We just want our routes pointing at routes so we will put the logic into the controllers
- 2. Import our models and asyncHandler into this file that way our routes file can just point to it

USER AUTHENTICATION ENDPOINT
- 1. Create a userRoute and userController
- 2. Add this app.use(express.json()) to our (server.js) so we can parse JSON data
- 3. Add the route to (server.js)
- 4. Add bcrypt to our USER model to handle the encrypted passwords
- 5. Implement the bcrypt function in the (userController) to check if the passwords match if not throw an errorMiddleware

JWT (JSON WEB TOKENS)
- - AUTHENTICATION - Authenticate (Create) a user in the database or see if they are already in there
- - AUTHENTICATION - Give that authenticated user access to part of the webpage they are allowed
- 1. Install jsonwebtoken
- 2. Create a (generateToken.js) file to put your function
- 3. Add the JWT_SECRET in our (.evn) file
- 4. Add the functionality to our (userController.js)

CUSTOM AUTHENTICATION MIDDLEWARE
- 1. Add a new function getUserProfile to our (userController.js)
- 2. Add that route to our (userRoutes.js) file so we can hit it
- 3. In our middleware folder create a new file (authMiddleware.js)
- 4. Create the middleware besure to call (next()) because were are working with middleware
- 5. Import the middleware into our (userRoutes.js) and pass it as the first argument to use it
- 6. We can now add protect wherever we want to protect a route

SAVE THE TOKEN IN POSTMAN
- 1. Get rid of current header if there is one
- 2. Add a test on our /login route -- pm.environment.set("TOKEN", pm.response.json().token)
- 3. Go to authorization on a protect route in our case /profile
- 4. Choose 'Bearer Token' and make sure the variable is passed in

USER REGISTRATION AND PASSWORD ENCRYPTION
- 1. Setup Postman route
- 2. Create function in (userController.js)
- 3. Import that function in (userRoutes.js)
- 4. ENCRYPT THE PASSWORD
- - 1. To do this we will go to our (userModel.js) and create a piece of middleware that will let us do something on saves, finds, or other actions
- - 2. Before we save will add middleware to encrypt password using bcrypt
- - 3. we will call the method but add .pre because we want this to happen before the save

USER LOGIN REDUCER AND ACTION
- 1. Create the constant
- 2. Create our (userReducers.js)
- 3. Bring it in to our (store.js)
- 5. Create our (userActions.js)
- 6. We need to go to our (store.js) and load our initial userInfo for localStorage like we did with our cart items

USER LOGIN SCREEN AND FUNCTIONALITY
- 1. Create new screen (LoginScreen.js)
- 2. We will also create a new component (FormContainer.js) because we will reuse this for our other forms in our application
- 3. Create a route for the (LoginScreen.js) so we can see it by going to (App.js)

SHOW USER IN NAVBAR AND LOGOUT
- 1. Go to (Header.js) we will add functionality to change 'Sign In' to the users name once they are signed in
- - 1. Import useDispatch, useSelector so we can get our state as well as call our logout action
- - 2. Use parenthesis to create a condition to display based on if (userInfo) exists
- - 3. Go to our (userActions.js) and create our logout userActions
- - - 1. our logout action consisists of removing 'userInfo' from localStorage and dispatching USER_LOGOUT
- - 4. We then dispatch this action in our (Header.js) file to log our user out

USER REGISTER REDUCER, ACTION, SCREEN
- 1. Create new user contants in (userConstants.js) for registering
- 2. Create a userRegisterReducer in (userReducer.js)
- 3. Bring in the reducer to (store.js)
- 4. Create a register action in (userActions.js)
- 5. Create the screen for registering (RegisterScreen.js)
- 6. Add the Screen in (App.js)

CREATING OUR UPDATE PROFILE ENDPOINT (BACKEND)
- 1. Add an updateUserProfile Controller which is a PUT request to our (userController.js) in the backend
- 2. Bring it in to our (userRoutes.js)

PROFILE SCREEN AND GET USER DETAILS
- 1. Create constants for USER_DETAILS
- 2. Create a new reducer
- 3. Import reducer to (store.js)
- 4. Create a new action for our users details
- 5. Create a new (ProfileScreen.js) file for our profile screen
- 6. Add our ProfileScreen to (App.js)

UPDATE USER PROFILE
- 1. Create new constants for USER_UPDATE
- 2. Create a new reducer for user update profile
- 3. Add the new reducer to (store.js)
- 4. Create a new action for updating user profiles
- 5. We should now be able to dispatch this in our (ProfileScreen.js)

SHIPPING SCREEN AND SAVE ADDRESS
- 1. Create our (ShippingScreen.js)
- 2. Add it to our (app.js)
- 3. Create an action in (cartActions.js) to save the users shipping info and continue to the next screen
- 4. Create the constants we need for the actions and reducers
- 5. Create the reducer for it in (cartReducer.js)
- 6. Since we are saving our shipping address through localStorage we want to initially load it from local storage in (store.js)
- 7. We want to add our shippingAddress as inital state in our cartReducer

CREATE THE CHECKOUT STEPS COMPONENT
- 1. Create the (CheckoutSteps.js) component
- 2. Insert the component into our (ShippingScreen.js)

PAYMENT SCREEN AND SAVE PAYMENT METHOD
- 1. Create (PaymentScreen.js)
- 2. Import (PaymentScreen.js) into our (App.js)
- 3. Create the savePaymentMethodAction
- 4. Create our constants
- 5. Create our reducer in (cartReducer.js)
- 6. Bring it into (store.js) and set our intial state or savePaymentMethod

PLACE ORDER SCREEN
- 1. Create (PlaceOrderScreen.js)
- 2. Import (PlaceOrderScreen.js) into our (App.js)
- 3. We will now need to go into our backend to create the routes for Placing an Order and adding it to the Database

ORDER CONTROLLER AND ROUTE (BACKEND FUNCTIONALITY)
- 1. Create our new (orderController.js)
- 2. Create our (orderRoutes.js) for our route
- 3. Since we created a new route we need to add it to our (server.js)

CREATE ORDER
- 1. We are going to go back to the frontend now that we have create our controller and routes 
- 2. Create a new constants file called (orderConstants.js)
- 3. Create a new reducer (orderReducer.js)
- 4. Bring this reducer into our store
- 5. Create new action file called (orderActions.js)
- 6. Bring this action into our (PlaceOrderScreen.js)
- 7. We now need to bring our order state into our PlaceOrderScreen because once we create we will need the info to display it

GET ORDER BY ID ENDPOINT (FETCH ORDER FROM DATABASE)
- 1. Go to our order controller
- 2. Once we add the getOrderById method to our controller we will add the route to hit to our (orderRoutes.js)

ORDER DETAILS REDUCER AND ACTION
- 1. Create constants for getting order details
- 2. Create the action for getting our orderDetails
- 3. Create the reducer for orderDetailsReducer
- 4. Add this reducer to our store

ORDER SCREEN
- 1. Create the (OrderScreen.js)
- 2. Add the screen to (App.js)

UPDATE TO PAID ENDPOINT
- 1. Go to (orderController.js)
- 2. Create updateOrderToPaid in controller
- 3. Go to our routes and update them

ORDER PAY REDUCER AND ACTION
- 1. Create our constants for ORDER PAY
- 2. Create our reducer for order PaymentScreen
- 3. Import our reducer into our (store.js)
- 4. Create the action for order pay

ADDING PAYPAL PAYMENTS 
- 1. Go to Developer Paypal and create a new app
- 2. We will take our client ID from this and store in our backend (dotenv)
- 3. We will put the route right in (server.js)
- 4. When we are ready to make a payment we will hit that route and fetch our Paypal client ID
- 5. To use Paypal in our app we need to use a specific script from the Paypal website
- 6. We will build this dynamically in our (OrderScreen.js) so we will need our Client Id 
- 7. We now need to bring in our orderPayAction and our orderPay state
- 8. For the Paypal Pay Button we will use an NPM package called react-paypal-button-v2 install this in the frontend
- 9. Import the package in (OrderScreen.js)

SHOW ORDERS ON PROFILE
- 1. To show a Users orders on their profile page we first need to start in the backend and create new routes for it
- 2. Import to orderRoutes make sure its above the others because they run in order
- 3. Back to the frontend
- 4. We will set up our constants for getting orders on our profile
- 5. Set up our reducer in (orderReducer.js)
- 6. Bring it into our (store.js)
- 7. Create our orderListMy action
- 8. We will go to the (ProfileScreen.js) and add the order view functionality

USER DETAILS & ORDERS RESET
- 1. Currently when you logout of an account and login as someone else the previous users order information is still on the profile screen
- -  We want to fix this so we have the user orders reset on logout
- 2. To do this we will go to our (orderController.js) and create a new ORDER_MY_LIST_RESET so we can reset the info
- 3. Go to our reducer for (orderReducer.js) and add a new case for RESET
- 4. We will do the same thing for our Users in (userConstants.js)
- 5. Add USER_DETAILS_RESET to reset them on logout
- 6. Go to (userReducers.js) and add a new reset case
- 7. We can the go to where we logout which is in our (userActions.js)
- 8. In the userActions we will bring in our two newly created constants
- 9. On the logout action we will just dispatch both of those

ADMIN MIDDLEWARE AND GET USERS ENDPOINT
- 1. We need to create middleware that checks for the 'isAdmin' flag to certain routes, this way we can display more functionality to the admins
- 2. We will first create a route to get users for the admin
- 3. Go into backend and our (userController.js) to create the endpoint for this
- 4. Then we will add it to our (userRoutes.js) file
- 5. To prevent anybody from hitting this route thats not an admin we will go to our (authMiddleware.js)
- 6. We will then create our middleware and import it back into our route file and call it as a second parameter

ADMIN USER LIST
- 1. We will start on this workflow in the frontend (userConstants.js)
- 2. Create the USER_LIST constants
- 3. Create the reducer in (userReducer.js)
- 4. Add the reducer to our (store.js)
- 5. We will now create our userAction 'listUsers'
- 6. We will now create the screen that admins can look at to observe users (UserListScreen.js)
- 7. Add our (UserListScreen.js) to our (App.js)
- 8. For an Admin to actually access this page we will need an admin dropdown in the (Header.js)
- 9. To do this we will need the logged in usersInfo to see if they are an admin

ADMIN SCREEN ACCESS SECURITY
- 1. We will be address two main issues with admin screen security
- - 1. When you logout on the admin screen it still stays on that screen it doesn't reset
- - 2. When you are logged in as a user thats not an admin and you try to hit the /admin/users route it gives you an error message, but we just want to redirect
- 2. We will go to our (UserListScreen.js) and add our userLogin state info so we can make checks
- 3. To accomplish this we will create a reset action like we did with USER_DETAILS
- 4. We will create a new constant is (userConstants.js)
- 5. Create the reducer for our user_list_reset
- 6. Import the reducer into the store
- 7. Add the USER_LIST_RESET reducer to our logout action in (userActions.js)

ADMIN USER DELETE
- 1. Start in backend (userController.js) - We will be creating the delete user functionality
- 2. Bring our deleteUser controller into our (userRoutes.js)
- 3. Test in postman 
- 4. Go to frontend and create our (userConstants.js) for deleting
- 5. Create our reducer
- 6. Import userDeleteReducer into (store.js)
- 7. Create our userDelete action
- 8. Implement delete functionality on admin screen

GET USER BY ID & UPDATE USER ENDPOINT
- 1. Backend (userController.js) create routes to get a user by id and update that users info
- 2. Create our getUserById and updateUser controller in (userController.js) so as an Admin we can find and update users
- 3. Import them into our routes file

USER EDIT SCREEN AND FETCHING USER FROM BACKEND
- 1. Create EditUserScreen.js
- 2. Once we get the basics created add it to (App.js)
- 3. Once we get the screen create we will create the Update User functionality

UPDATE USER FUNCTIONALITY
- 1. Create our constants for user updating
- 2. Create our reducer for user updating
- 3. Add our reducer to our store.js
- 4. Create the updateUser action
- 5. Add the functionality to our UserEditScreen.js (call action)
- 6. We will also bring in the USER_UPDATE_RESET constant so we can dispatch from our screen

ADMIN PRODUCT LIST
- 1. Create admin product list page (ProudctListScreen.js)
- 2. Once screen is create add it to (App.js)

ADMIN DELETE PRODUCT FUNCTIONALITY
- 1. Start in Backend and create our controller and route for deleting a product (productController.js) (productRoutes.js) make sure to include the authMiddleware
- 2. We will now create the constants for PRODUCT_DELETE
- 3. Create the product delete reducer
- 4. Add the reducer to (store.js)
- 5. Create the deleteProduct action
- 6. Implement deleting a product on (ProductListScreen.js)

CREATE AND UPDATE PRODUCTS ENDPOINT
- 1. Create our controllers in the backend (productControllers.js)
- 2. Add our routes to (productRoutes.js)
- 3. Create and test Postman routes

ADMIN CREATE PRODUCT
- 1. Create PRODUCT_CREATE constants in (productConstant.js)
- 2. Create our productCreateReducer in (productReducers.js)
- 3. Add our productCreateReducer to our (store.js)
- 4. Create our productCreate action in (productActions.js)
- 5. Add our action and state to (ProductListScreen.js) so we can create products from the frontend

EDIT PRODUCT SCREEN
- 1. Create (ProductEditScreen.js)
- 2. Add this screen to our (App.js)

ADMIN UPDATE PRODUCT
- 1. Create our PRODUCTS_UPDATES constants
- 2. Create our productUpdateReducer
- 3. Add that reducer to our (store.js)
- 4. Create our updateProduct action
- 5. Add the functionality to our (ProductEditScreen.js)

IMAGE UPLOAD CONFIG AND ENDPOINT
- 1. Need to start in the backend and create an endpoint for /api/upload
- 2. To do this we will install a package called 'multer'
- 3. Create a (uploads) folder in the root to store our uploaded images
- 4. In the backend in our (routes) folder create a new route called (uploadRoutes.js)
- 5. In the file we create our route as well as configure multer
- 6. Once we get the route and the multer config setup we need to add the path to (server.js)
- 7. Now we need to make our (uploads) folder a static folder so that it is accessable by default
- 8. To make it static we will go to our (server.js) and add the line of code to make it static (line 36)

FRONTEND IMAGE UPLOAD
- 1. We will go to our (ProductEditScreen.js)
- 2. Import axios and create a state variable for uploading

ADMIN ORDER LIST
- 1. Add our backend route to get all of our orders
- 2. In (orderController.js) we will create a new function
- 3. In (orderRoutes.js) we will add our controller to our /api/orders route
- 4. Create test routes in Postman to make sure it works
- 5. Creaet constants for ORDER_MY_LIST_RESET
- 6. Create reducer for orderListReducer
- 7. Add reducer to (store.js)
- 8. Create listOrders action
- 9. Implement into OrderListScreen.js

MARK ORDER AS DELIVERED
- 1. Start with our (orderController.js) in the backend
- 2. When we create or controller we need to add it to our (orderRoutes.js)
- 3. Next go to frontend and create new constants for ORDER_DELIVER in (ordercConstants.js)
- 4. Create our reducer
- 4. Import reducer to (store.js)
- 5. Create action
- 6. Implement into screen (OrderScreen.js) is where we want the button to mark as delivered

MORGAN AND CREATE REVIEW ENDPOINT
- - Morgan is just a package that lets you see when someone hits a route in the console
- 1. npm install morgan
- 2. Import morgan in (server.js) and add  the middleware
- 3. Setup our controller in (productController.js)
- 4. Add the controller in (productRoutes.js)
- 5. Test with Postman

FRONTEND PRODUCT REVIEWS
- 1. Create constants for reviews in (productConstants.js)
- 2. Create the reducer
- 3. Add the reducer to the store
- 4. Create the action for creating product reviews
- 5. Add the functionality to the Screen (ProductScreen.js)

PRODUCT SEARCH
- 1. Create the search box component (SearchBox.js)
- 2. Add the /search/:keyword route to our (App.js) and render the HomeScreen
- 3. Embed the SearchBox component in our (Header.js)
- 4. Give function to SearchBox
- 5. Start in (HomeScreen.js)
- 6. We need to update our (listProducts) action
- 7. Once we add it to our action we have to account for it in the backend
- 8. In the backend go to our (productController.js)
- 9. To make it work for multiple searches we can't forget to add keywords as a dependencies to our useEffect so it will reload when keywords changes

PAGINATION
- 1. Start in the BackEnd for pagination
- 2. In our (productController.js)
- 3. Once we update our getProducts function in (productController.js) we need to return to the frontend so that we can fix our map because we are now sending multiple pieces of info on our request
- 4. Edit (productActions.js) listProducts. We will pass our pageNumber into our action
- 5. We then need to account for the fact that we are passing back several forms of information now in our (productReducer.js)
- 6. To do this in (productReducer.js) we will specify the payload on our PROUDCT_LIST_SUCCESS
- 7. We need to add the new routes for pages in (App.js)
- 8. We now need to account for these new routes in our (HomeScreen.js)
- 9. Now that we have the functionality in we will create a (Pagination) component to navigate
- 10. Once we create the Paginate component we need to import it to our (HomeScreen.js)
- 11. We will now add Pagination functionality to our Admin dashboard feautres
- 12. It using the same endpoint in the backend as our HomeScreen so it is already limiting the products that are showing
- 13. However we still need to navigate to se will go to our (ProductListScreen.js) and add the Pagination component
- 14. We must also pass the pageNumber as a parameter to our listProducts action so we will get it from the URL like in (HomeScreen.js)
- 15. We have to do is in our (Paginate.js) component we have to use the isAdmin prop we passed in to distinguish if we are on the Admin Product List or just the HomePage
- 16. The last thing we need to do is create the route in (App.js) for our /productlist/pageNumber Pagination

TOP PRODUCTS CAROUSEL
- 1. 